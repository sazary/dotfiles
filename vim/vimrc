set nocompatible              " be iMproved, required
filetype off                  " required

call plug#begin('~/.vim/plugged')

" set shell=/bin/bash
" let $SHELL = "/usr/bin/fish"
if executable('fish')
    " use fish for embedded terminals
    set shell=fish
    " use bash for else
    let $SHELL = 'bash'
endif

Plug 'editorconfig/editorconfig-vim'

Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'
Plug 'junegunn/gv.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tommcdo/vim-fugitive-blame-ext'
Plug 'rhysd/committia.vim'

Plug 'bkad/CamelCaseMotion'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Raimondi/delimitMate'

Plug 'heavenshell/vim-pydocstring'

Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'
Plug 'mattn/emmet-vim'
" Plug 'w0rp/ale'

Plug 'xolox/vim-session'
Plug 'xolox/vim-misc'

" Plug 'altercation/vim-colors-solarized'
Plug 'arcticicestudio/nord-vim'

Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'ternjs/tern_for_vim'
Plug 'vim-scripts/JavaScript-Indent'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'othree/html5.vim'
Plug 'claco/jasmine.vim'

Plug 'HerringtonDarkholme/yats.vim'
Plug 'peitalin/vim-jsx-typescript'

" Plug 'pycqa/flake8'
" Plug 'hynek/vim-python-pep8-indent'
" Plug 'tell-k/vim-autopep8'
Plug 'raimon49/requirements.txt.vim'

Plug 'fisadev/vim-isort'

Plug 'mileszs/ack.vim'

Plug 'majutsushi/tagbar'
Plug 'fatih/vim-go'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

Plug 'ekalinin/Dockerfile.vim'

Plug 'stephpy/vim-yaml'
Plug 'pearofducks/ansible-vim'
Plug 'xavierchow/vim-swagger-preview'

Plug 'elzr/vim-json'

Plug 'Shougo/vimproc.vim', {'do' : 'make'}

Plug 'easymotion/vim-easymotion'

Plug 'udalov/kotlin-vim'

" Plug 'zxqfl/tabnine-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'davidhalter/jedi-vim'
" Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build' }

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'yuki-ycino/fzf-preview.vim', { 'branch': 'release/remote', 'do': ':UpdateRemotePlugins' }

Plug 'mhinz/vim-startify'

Plug 'ryanoasis/vim-devicons'

Plug 'lifepillar/pgsql.vim'

Plug 'towolf/vim-helm'

Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

call plug#end()

filetype plugin indent on     " required

set nohlsearch

" vim go
nnoremap <leader>gi :GoImplements<CR>


" solarized theme
syntax enable
set background=dark
color nord

" airline
set laststatus=2
let g:airline_powerline_fonts = 1
set statusline^=%{coc#status()}

" list files for open
set wildmenu

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" easy split nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Y behav
map Y y$

"move on wraped lines
nnoremap j gj
nnoremap k gk

" leader remap
let mapleader = ","

" jk as esc
inoremap jk <Esc>
inoremap kj <Esc>

" show current file in nerd tree
map <silent> <C-s> :NERDTree<CR><C-w>p:NERDTreeFind<CR>

" show line numbers
set number

" search case insensitive
set ignorecase
set smartcase

" searhc incremental
set incsearch

" ctrl-p
let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlPMRUFiles' " by default ctrlp opens in mru + files mode
nnoremap <c-P> :CtrlP<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*.pyc,*/vendor/* " ignore shitty files

" ctrlp on enter, open in a tab. on c-e, open in current.
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-e>', '<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ 'PrtCurEnd()':          ['<c-q>'],
    \ }

" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
" let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden --ignore .git -g ""'
" let g:ctrlp_user_command = 'ag %s -l --hidden -g ""'

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_mruf_relative = 1

" nerd tree close tab when it's the only window
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" nerd tree toggle with c-n
map <C-n> :NERDTreeToggle<CR>

" nerd tree auto close when opening a file
let NERDTreeQuitOnOpen = 1

" nerd tree ignore pyc files
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

" let NERDTreeMinimalUI = 1
:let g:NERDTreeWinSize=40

" map Q to repeat last macro
nnoremap Q @@

" fold on syntax
set foldmethod=indent
set foldcolumn=0
set foldlevel=1

" set mouse
set mouse=a
" tab = 4 spaces
set tabstop=4
set expandtab
set shiftwidth=4

" javascript fold
au FileType javascript call JavaScriptFold()

" javascript libs
let g:used_javascript_libs = 'jquery,angularjs,angulaui,react'

" jump to last tab by leader tl
let g:lasttab = 1
nmap <leader>l :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" map common typos
cabbrev W w
cmap Wa wa
cabbrev Q q
cmap Qa qa
cabbrev E e

" easier new tab
cabbrev tb tabnew

" easier session
cabbrev S SaveSession
cabbrev O OpenSession

" nerd tree change current dir
let g:NERDTreeChDirMode = 2

" auto save the session on quit
let g:session_autosave = 'yes'
let g:session_autoload = 'no'

" auto save the session periodically
let g:session_autosave_periodic = 5

" fix backspace
set backspace=indent,eol,start

" camelcase
"call camelcasemotion#CreateMotionMappings('<leader>')
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" arabic shape
" this is kind of bug
set arabicshape
set noarabicshape

" white spaces are removed on every write
autocmd BufWritePre * :%s/\s\+$//e

" emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" fugitive
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gb :Gblame<CR>

" some conveniences
nnoremap <leader>qq :q<CR>
nnoremap <leader>qa :qa<CR>
nnoremap <leader>wqq :wq<CR>
nnoremap <leader>wqa :wqa<CR>
nnoremap <leader>ww :w<CR>
nnoremap <leader>wa :wa<CR>

" set default register to system clipboard
set clipboard=unnamedplus

" loclist shortcuts
nmap <leader>ln :lnext<CR>
nmap <leader>lp :lprev<CR>
nmap <leader>lo :lopen<CR>

let g:airline#extensions#ale#enabled = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'typescript': ['eslint'],
\   'go': ['gofmt', 'goimports'],
\   'python': ['yapf', 'isort'],
\   'sql': ['pgformatter'],
\   'yml': ['yamlfix'],
\}

let g:ale_linters = {
\   'python': [],
\}

" \   'python': ['flake8', 'mypy', 'jedils'],
"
" to be compatible with coc
let g:ale_disable_lsp = 1

let g:ale_fix_on_save = 1
let g:ale_javascript_eslint_options = '--cache'
let g:nvim_typescript#default_mappings = 1
let g:ale_set_balloons = 1
let g:nvim_typescript#type_info_on_hold = 1
let g:ale_sql_pgformatter_options = '-w 99'

" highlight 100th column
set colorcolumn=100

" update tags asynchronously
let g:easytags_async = 1

" save tags in project's directory instead of global
set tags=./tags;
let g:easytags_dynamic_files = 1

" exclude everything in gitignore when creating tags
let g:easytags_opts = ['--exclude="@.gitignore"']

" will call GoImports to import packages of golang files on <leader>i
autocmd FileType go map <buffer> <leader>i :GoImports<CR>

" set directory of virtualenvs
let g:virtualenv_directory = '~/.virtualenvs/'

" auto activate virtualenv, if there is one active!
let g:virtualenv_auto_activate = 1

" replace word under cursor on <leader>r
:nnoremap <Leader>r :%s/\<<C-r><C-w>\>/<C-r><C-w>/gc<Left><Left><Left>

" find word under the cursor in the project using Ag
" :nnoremap <Leader>f :Ack '<C-r><C-w>'<CR>

" use ag instead of ack for search
let g:ackprg = 'ag'

" open locations in new tab from quickfix list
:set switchbuf+=usetab,newtab

" git gutter update faster
set updatetime=1000

" git gutter mappings
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterRevertHunk
set signcolumn=yes

" add a space when commenting
let NERDSpaceDelims=1

" let g:golang_goroot = "/usr/local/go"

" don't fold all codes after each save & gofmt
let g:go_fmt_experimental = 1

" do goimports
:nnoremap <Leader>gii :GoImports<CR>

" tagbar shortcut
nmap <Leader>tg :TagbarToggle<CR>

" to make sure editorconfig dones't mess with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" shows count of occurances of word under cursor in this file
map <leader>* *<C-O>:%s///gn<CR>

" delete all blank lines
map <leader>rb :g/^\s*$/d<CR>

" reduce all multiple blank lines to single blank line
map <leader>rB :g/^\_$\n\_^$/d<CR>

" NERDTree git indicator symbols
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "-",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "U",
    \ "Deleted"   : "D",
    \ "Dirty"     : "*",
    \ "Clean"     : "C",
    \ 'Ignored'   : "i",
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeGitStatusConcealBrackets = 1

" Enable default mapping of easymotion in normal mode
nmap s <Plug>(easymotion-overwin-f)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" limit easymotion label keys to center row
let g:EasyMotion_keys='asdfjklqweruiopzxcvm'

" change cursor shape in insert mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" set persistent undo for each file
set undofile             " Persistent undo
set undodir=~/.vim/undodir
set undolevels=1000      " Maximum number of changes that can be undone
set undoreload=10000     " Maximum number lines to save for undo on a buffer reload

" let g:jedi#goto_command = "<C-]>"


" automatically save sessions on close
let g:startify_session_persistence = 1
let g:startify_change_to_vcs_root = 1

" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" select snippet suggestions in coc when we press enter
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() :
                                           \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <C-]> <Plug>(coc-definition)
autocmd FileType go nmap <C-]> <Plug>(coc-type-definition)
autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
nmap <silent> gy <Plug>(coc-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>rn <Plug>(coc-rename)
nnoremap <silent><nowait> <leader>c  :<C-u>CocAction<cr>

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" so that pgsql handles files with sql extension too
let g:sql_type_default = 'pgsql'

let g:fzf_preview_lines_command = 'bat --color=always --plain --number --theme=Nord'
let g:fzf_preview_command = 'bat --color=always --plain {-1} --theme=Nord'
let g:fzf_preview_floating_window_rate = 0.8
let g:fzf_preview_filelist_command = 'rg --files --hidden --follow --no-messages -g \!"* *"' " Installed ripgrep
let g:fzf_preview_preview_key_bindings = 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'
let g:fzf_preview_use_dev_icons = 1

nmap <Leader>f [fzf-p]
xmap <Leader>f [fzf-p]

nnoremap <silent> [fzf-p]p     :<C-u>CocCommand fzf-preview.FromResources project_mru git<CR>
nnoremap <silent> [fzf-p]gs    :<C-u>CocCommand fzf-preview.GitStatus<CR>
nnoremap <silent> [fzf-p]ga    :<C-u>CocCommand fzf-preview.GitActions<CR>
nnoremap <silent> [fzf-p]d     :<C-u>CocCommand fzf-preview.CocCurrentDiagnostics<CR>
nnoremap <silent> [fzf-p]D     :<C-u>CocCommand fzf-preview.CocDiagnostics<CR>
nnoremap <silent> [fzf-p]b     :<C-u>CocCommand fzf-preview.Buffers<CR>
nnoremap <silent> [fzf-p]B     :<C-u>CocCommand fzf-preview.AllBuffers<CR>
nnoremap <silent> [fzf-p]o     :<C-u>CocCommand fzf-preview.FromResources buffer project_mru<CR>
nnoremap <silent> [fzf-p]<C-o> :<C-u>CocCommand fzf-preview.Jumps<CR>
nnoremap <silent> [fzf-p]g;    :<C-u>CocCommand fzf-preview.Changes<CR>
nnoremap <silent> [fzf-p]/     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'"<CR>
nnoremap <silent> [fzf-p]*     :<C-u>CocCommand fzf-preview.Lines --add-fzf-arg=--no-sort --add-fzf-arg=--query="'<C-r>=expand('<cword>')<CR>"<CR>
nnoremap          [fzf-p]gr    :<C-u>CocCommand fzf-preview.ProjectGrep<Space>
xnoremap          [fzf-p]gr    "sy:CocCommand   fzf-preview.ProjectGrep<Space>-F<Space>"<C-r>=substitute(substitute(@s, '\n', '', 'g'), '/', '\\/', 'g')<CR>"
nnoremap <silent> [fzf-p]gg    :<C-u>CocCommand fzf-preview.ProjectGrep . --resume<CR>
nnoremap <silent> [fzf-p]t     :<C-u>CocCommand fzf-preview.BufferTags<CR>
nnoremap <silent> [fzf-p]q     :<C-u>CocCommand fzf-preview.QuickFix<CR>
nnoremap <silent> [fzf-p]l     :<C-u>CocCommand fzf-preview.LocationList<CR>


let g:fzf_preview_buffers_jump = 0

let g:python_host_prog = '/home/sazary/.virtualenvs/miare39/bin/python'
let g:python3_host_prog = '/home/sazary/.virtualenvs/miare39/bin/python'


nnoremap n nzz
