set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
" Plugin 'VundleVim/Vundle.vim'
"
call plug#begin('~/.vim/plugged')

set shell=/bin/bash

" The following are examples of different formats supported.
" Keep bundle commands between here and filetype plugin indent on.
" scripts on GitHub repos
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
" scripts from http://vim-scripts.org/vim/scripts.html
"Bundle 'FuzzyFinder'
" scripts not on GitHub
"Bundle 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Bundle 'file:///home/gmarik/path/to/plugin'
" ...
"

Plug 'editorconfig/editorconfig-vim'

Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'
Plug 'airblade/vim-gitgutter'
Plug 'tommcdo/vim-fugitive-blame-ext'
Plug 'rbong/vim-flog'
Plug 'arkwright/vim-manhunt'

Plug 'bkad/CamelCaseMotion'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Raimondi/delimitMate'

Plug 'heavenshell/vim-pydocstring'

Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'
Plug 'mattn/emmet-vim'
Plug 'w0rp/ale'

Plug 'xolox/vim-session'
Plug 'xolox/vim-misc'

Plug 'altercation/vim-colors-solarized'

Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'ternjs/tern_for_vim'
Plug 'vim-scripts/JavaScript-Indent'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'othree/html5.vim'
Plug 'claco/jasmine.vim'

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'


Plug 'craigemery/vim-autotag'

Plug 'pycqa/flake8'
Plug 'hynek/vim-python-pep8-indent'
Plug 'tell-k/vim-autopep8'

Plug 'fisadev/vim-isort'

Plug 'mileszs/ack.vim'

Plug 'majutsushi/tagbar'
Plug 'fatih/vim-go'

Plug 'tpope/vim-surround'

Plug 'ekalinin/Dockerfile.vim'

Plug 'stephpy/vim-yaml'
Plug 'pearofducks/ansible-vim'

Plug 'elzr/vim-json'

Plug 'Shougo/vimproc.vim', {'do' : 'make'}

Plug 'easymotion/vim-easymotion'

Plug 'udalov/kotlin-vim'

Plug 'zxqfl/tabnine-vim'

call plug#end()

filetype plugin indent on     " required

" vim go
nnoremap <leader>gi :GoImplements<CR>

" NERDTree
nnoremap <leader>nf :NERDTreeFind<CR>

" fix end & home buttons
set term=xterm-256color

" solarized theme
syntax enable
set background=dark
color solarized

" airline
set laststatus=2
let g:airline_powerline_fonts = 1

" list files for open
set wildmenu

" reselect visual block after indent
vnoremap < <gv
vnoremap > >gv

" easy split nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Y behav
map Y y$

"move on wraped lines
nnoremap j gj
nnoremap k gk

" leader remap
let mapleader = ","

" jk as esc
inoremap jk <Esc>
inoremap kj <Esc>

" show current file in nerd tree
map <silent> <C-s> :NERDTree<CR><C-w>p:NERDTreeFind<CR>

" show line numbers
set number

" search case insensitive
set ignorecase
set smartcase

" searhc incremental
set incsearch

" ctrl-p
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMRUFiles' " by default ctrlp opens in mru + files mode
nnoremap <c-P> :CtrlPBuffer<CR>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*,*.pyc,*/vendor/* " ignore shitty files

" ctrlp on enter, open in a tab. on c-e, open in current.
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-e>', '<2-LeftMouse>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ 'PrtCurEnd()':          ['<c-q>'],
    \ }

" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden --ignore .git -g ""'

" nerd tree auto open on start
autocmd vimenter * if !argc() | NERDTree | endif

" nerd tree toggle with c-n
map <C-n> :NERDTreeToggle<CR>

" nerd tree auto close when opening a file
let NERDTreeQuitOnOpen = 1

" nerd tree ignore pyc files
let NERDTreeIgnore = ['\.pyc$']

" map Q to repeat last macro
nnoremap Q @@

" fold on syntax
set foldmethod=indent
set foldcolumn=0
set foldlevel=1

" set mouse
set mouse=a
" tab = 4 spaces
set tabstop=4
set expandtab
set shiftwidth=4

" javascript fold
au FileType javascript call JavaScriptFold()

" javascript libs
let g:used_javascript_libs = 'jquery,angularjs,angulaui,react'

" jump to last tab by leader tl
let g:lasttab = 1
nmap <leader>l :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" map common typos
cabbrev W w
cmap Wa wa
cabbrev Q q
cmap Qa qa
cabbrev E e

" easier new tab
cabbrev tb tabnew

" easier session
cabbrev S SaveSession
cabbrev O OpenSession

" nerd tree change current dir
let g:NERDTreeChDirMode = 2

" auto save the session on quit
let g:session_autosave = 'yes'
let g:session_autoload = 'no'

" auto save the session periodically
let g:session_autosave_periodic = 5

" fix backspace
set backspace=indent,eol,start

" camelcase
"call camelcasemotion#CreateMotionMappings('<leader>')
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" arabic shape
" this is kind of bug
set arabicshape
set noarabicshape

" white spaces are removed on every write
autocmd BufWritePre * :%s/\s\+$//e

" emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" fugitive
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gb :Gblame<CR>

" some conveniences
nnoremap <leader>qq :q<CR>
nnoremap <leader>qa :qa<CR>
nnoremap <leader>wqq :wq<CR>
nnoremap <leader>wqa :wqa<CR>
nnoremap <leader>ww :w<CR>
nnoremap <leader>wa :wa<CR>

" set default register to system clipboard
set clipboard=unnamed

" loclist shortcuts
nmap <leader>ln :lnext<CR>
nmap <leader>lp :lprev<CR>
nmap <leader>lo :lopen<CR>

let g:airline#extensions#ale#enabled = 1

" map autopep8
autocmd FileType python map <buffer> <leader>pe :call Autopep8<CR>

" highlight 100th column
set colorcolumn=100

" update tags asynchronously
let g:easytags_async = 1

" save tags in project's directory instead of global
set tags=./tags;
let g:easytags_dynamic_files = 1

" exclude everything in gitignore when creating tags
let g:easytags_opts = ['--exclude="@.gitignore"']

" will call isort to sort python imports on <leader>i
autocmd FileType python map <buffer> <leader>i :Isort<CR>

" will call GoImports to import packages of golang files on <leader>i
autocmd FileType go map <buffer> <leader>i :GoImports<CR>

" set directory of virtualenvs
let g:virtualenv_directory = '~/code/python/virtualenvs'

" auto activate virtualenv, if there is one active!
let g:virtualenv_auto_activate = 1

" replace word under cursor on <leader>r
:nnoremap <Leader>r :%s/\<<C-r><C-w>\>/<C-r><C-w>/gc<Left><Left><Left>

" find word under the cursor in the project using Ag
:nnoremap <Leader>f :Ack '<C-r><C-w>'<CR>

" use ag instead of ack for search
let g:ackprg = 'ag'

" open locations in new tab from quickfix list
:set switchbuf+=usetab,newtab

" git gutter update faster
set updatetime=1000

" git gutter mappings
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterRevertHunk
set signcolumn=yes

" add a space when commenting
let NERDSpaceDelims=1

let g:golang_goroot = "/usr/local/go"

" don't fold all codes after each save & gofmt
let g:go_fmt_experimental = 1

" do goimports
:nnoremap <Leader>gii :GoImports<CR>

" tagbar shortcut
nmap <Leader>tg :TagbarToggle<CR>

" to make sure editorconfig dones't mess with fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" shows count of occurances of word under cursor in this file
map <leader>* *<C-O>:%s///gn<CR>

" delete all blank lines
map <leader>rb :g/^\s*$/d<CR>

" reduce all multiple blank lines to single blank line
map <leader>rB :g/^\_$\n\_^$/d<CR>

" NERDTree git indicator symbols
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "-",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "U",
    \ "Deleted"   : "D",
    \ "Dirty"     : "*",
    \ "Clean"     : "C",
    \ 'Ignored'   : "i",
    \ "Unknown"   : "?"
    \ }

" Enable default mapping of easymotion in normal mode
nmap s <Plug>(easymotion-overwin-f)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" limit easymotion label keys to center row
let g:EasyMotion_keys='asdfjklqweruiopzxcvm'

" change cursor shape in insert mode
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" set persistent undo for each file
set undofile             " Persistent undo
set undodir=~/.vim/undodir
set undolevels=1000      " Maximum number of changes that can be undone
set undoreload=10000     " Maximum number lines to save for undo on a buffer reload
